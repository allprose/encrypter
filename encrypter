import os
import subprocess
import sys
import base64
import json
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

def install_cryptography():
    try:
        from cryptography.fernet import Fernet
    except ImportError:
        print("cryptography package not found. Installing...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "cryptography"])
        print("cryptography installed successfully.")
        from cryptography.fernet import Fernet

install_cryptography()

from cryptography.fernet import Fernet

def generate_salt():
    return os.urandom(16)

def derive_key_from_password(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    return key

def encrypt_text(text, password):
    salt = generate_salt()
    key = derive_key_from_password(password, salt)
    f = Fernet(key)
    encrypted = f.encrypt(text.encode())
    # Return both the encrypted data and the salt
    return base64.urlsafe_b64encode(salt).decode() + ":" + encrypted.decode()

def decrypt_text(encrypted_data, password):
    try:
        salt_b64, encrypted_b64 = encrypted_data.split(":")
        salt = base64.urlsafe_b64decode(salt_b64)
        encrypted = encrypted_b64.encode()
        key = derive_key_from_password(password, salt) 
        f = Fernet(key)
        decrypted = f.decrypt(encrypted).decode()
        return decrypted
    except Exception as e:
        return "Decryption failed: Invalid key or data."

def encrypt_file(file_path, password):
    salt = generate_salt() 
    key = derive_key_from_password(password, salt)  
    f = Fernet(key)
    with open(file_path, "rb") as file:
        file_data = file.read()
    encrypted_data = f.encrypt(file_data)
    with open(file_path + ".enc", "wb") as file:
        file.write(base64.urlsafe_b64encode(salt) + b":" + encrypted_data)
    print(f"File {file_path} encrypted successfully.")

def decrypt_file(file_path, password):
    with open(file_path, "rb") as file:
        encrypted_data = file.read()
    try:
        salt_b64, encrypted_b64 = encrypted_data.split(b":")
        salt = base64.urlsafe_b64decode(salt_b64)
        encrypted = encrypted_b64
        key = derive_key_from_password(password, salt)  
        f = Fernet(key)
        decrypted_data = f.decrypt(encrypted)
        decrypted_file_path = file_path.replace(".enc", "")
        with open(decrypted_file_path, "wb") as file:
            file.write(decrypted_data)
        print(f"File {file_path} decrypted successfully.")
    except Exception as e:
        print("Decryption failed: Invalid key or corrupted file.")

def main():
    while True:
        print("\nEncryption/Decryption Tool with Salting")
        print("1. Encrypt text")
        print("2. Decrypt text")
        print("3. Encrypt a file")
        print("4. Decrypt a file")
        print("5. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            text = input("Enter the text to encrypt: ")
            password = input("Enter password: ")
            encrypted_text = encrypt_text(text, password)
            print(f"Encrypted text: {encrypted_text}")
        elif choice == "2":
            encrypted_text = input("Enter the encrypted text to decrypt: ")
            password = input("Enter password: ")
            decrypted_text = decrypt_text(encrypted_text, password)
            print(f"Decrypted text: {decrypted_text}")
        elif choice == "3":
            file_path = input("Enter the file path to encrypt: ")
            if os.path.exists(file_path):
                password = input("Enter password: ")
                encrypt_file(file_path, password)
            else:
                print("File not found.")
        elif choice == "4":
            file_path = input("Enter the file path to decrypt: ")
            if os.path.exists(file_path):
                password = input("Enter password: ")
                decrypt_file(file_path, password)
            else:
                print("File not found.")
        elif choice == "5":
            break
        else:
            print("Invalid option, try again!")

if __name__ == "__main__":
    main()
